%\VignetteIndexEntry{OncoSimulR Overview}
%\VignetteDepends{OncoSimulR}
%\VignetteKeywords{OncoSimulR simulation cancer oncogenetic trees}
%\VignettePackage{OncoSimulR}
%\VignetteEngine{knitr::knitr}
\documentclass[a4paper,11pt]{article}
<<echo=FALSE,results='hide',error=FALSE>>=
require(knitr, quietly = TRUE)
opts_knit$set(concordance = TRUE)
##opts_knit$set(stop_on_error = 2L)
@ 
\usepackage{amsmath}
%% \usepackage[authoryear,round,sort]{natbib}
\usepackage{threeparttable}
\usepackage{array}
%%\usepackage{hyperref} %% not if using BiocStyle
%%ditto
%\usepackage{geometry}
%\geometry{verbose,a4paper,tmargin=23mm,bmargin=26mm,lmargin=28mm,rmargin=28mm}
\usepackage{url}
\usepackage{xcolor}
%\definecolor{light-gray}{gray}{0.72}
\newcommand{\cyan}[1]{{\textcolor {cyan} {#1}}}
\newcommand{\blu}[1]{{\textcolor {blue} {#1}}}
\newcommand{\Burl}[1]{\blu{\url{#1}}}


%%\SweaveOpts{echo=TRUE}

%\usepackage{tikz}
%\usetikzlibrary{arrows,shapes,positioning}

\usepackage[latin1]{inputenc}


\usepackage{gitinfo}

%Uncomment for BioC
%\usepackage{datetime}
%\newdateformat{mydate}{\THEDAY-\monthname[\THEMONTH]-\THEYEAR}

<<style-knitr, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@


%%\title{Using OncoSimulR: a package for simulating cancer progression data,
%%including drivers and passengers, and allowing for order restrictions.}

%%\author{Ramon Diaz-Uriarte\\
%%Dept. Biochemistry, Universidad Aut\'onoma de Madrid \\ 
%%Instituto de Investigaciones Biom\'edicas ``Alberto Sols'' (UAM-CSIC)\\
%%Madrid, Spain\\
%%{\small \texttt{ramon.diaz@iib.uam.es}} \\
%%{\small \texttt{rdiaz02@gmail.com}} \\
%%{\small \Burl{http://ligarto.org/rdiaz}} \\
%%}


\bioctitle{Using OncoSimulR: examples}

%% \bioctitle{Using OncoSimulR: a package for simulating cancer progression data,
%%   including drivers and passengers, and allowing for order restrictions.}

\author{Ramon Diaz-Uriarte\\
  Dept. Biochemistry, Universidad Aut\'onoma de Madrid \\ 
  Instituto de Investigaciones Biom\'edicas ``Alberto Sols'' (UAM-CSIC)\\
  Madrid, Spain{\footnote{ramon.diaz@iib.uam.es, rdiaz02@gmail.com}} \\
%% {\footnote{rdiaz02@gmail.com}} \\
{\small \Burl{http://ligarto.org/rdiaz}} \\
 }
%% \date{\the\year-\the\month-\the\day}
%% \date{\mydate\today}
 \date{\gitAuthorDate\ {\footnotesize (Rev: \gitAbbrevHash)}}
\begin{document}
\maketitle

%% Remember to add BiocStyle to Suggests
%%
%% I get lots of problems, so will try later.
%% <<style, eval=TRUE, echo=FALSE, results=tex>>=
%% BiocStyle::latex()
%% @

\tableofcontents


\subsection{Specifying modules}

Why do we force you to specify ``Root'' = ``Root''? We could check for it,
and add it if it is not present. But we want you to be explicit (and we
want to avoid you shooting yourself in the foot having a gene that is not
root but is called ``Root'', etc).


\subsection{Order effects and modules}

Consider the following case:
<<>>=
ofe1 <- allFitnessEffects(orderEffects = c("F > D" = -0.3, "D > F" = 0.4),
                          geneToModule =
                              c("Root" = "Root",
                                "F" = "f1, f2",
                                "D" = "d1, d2") )

ag <- evalAllGenotypes(ofe1)

@ 

There are four genes, $d1, d2, f1, f2$, where each $d$ belongs to module
$D$ and each $f$ belongs to module $F$.

What to expect for cases such as $d1 > f1$ or $f1 > d1$ is clear, as shown in

<<>>=
ag[5:16,]
@ 

Likewise, cases such as $d1 > d2 > f1$ or $f2 > f1 > d1$ are clear,
because in terms of modules they map to $ D > F$ or $F > D$: the observed
order of mutation $d1 > d2 > f1$ means that module $D$ was mutated first
and module $F$ was mutated second. Similar for $d1 > f1 > f2$ or
$f1 > d1 > d2$: those map to $D > F$ and $F > D$. We can see the fitness
of those four case in:

<<>>=
ag[c(17, 39, 19, 29), ]
@ 

and they correspond to the values of those order effects, where $F > D =
(1 - 0.3)$ and $D > F = (1 + 0.4)$:

<<>>=
ag[c(17, 39, 19, 29), "Fitness"] == c(1.4, 0.7, 1.4, 0.7)
@ 

What if we match several patterns? For example, $d1 > f1 > d2 > f2$ and
$d1 > f1 > f2 > d2$? The first maps to $D > F > D > F$ and the second to
$D > F > D$. But since we are concerned with which one happened first and
which happened second we should expect those two to correspond to the same
fitness, that of pattern $D > F$, as is the case:

<<>>=
ag[c(43, 44),]
ag[c(43, 44), "Fitness"] == c(1.4, 1.4)
@ 
More generally, that applies to all the patterns that start with one of
the ``d'' genes:
<<>>=
all(ag[41:52, "Fitness"] == 1.4)
@ 

Similar arguments apply to the opposite pattern, $F > D$, which apply to
all the possible gene mutation orders that start with one of the ``f''
genes. For example:
<<>>=
all(ag[53:64, "Fitness"] == 0.7)
@ 



\subsubsection{Another example of order and modules}
We can of course have more than two genes per module. This just repeats
the above, with five genes (there are 325 genotypes, and that is why we
pass the ``max'' argument, to allow for more than the default 256).

<<>>=

ofe2 <- allFitnessEffects(orderEffects = c("F > D" = -0.3, "D > F" = 0.4),
                          geneToModule =
                              c("Root" = "Root",
                                "F" = "f1, f2, f3",
                                "D" = "d1, d2") )
ag2 <- evalAllGenotypes(ofe2, max = 325)

@ 

We can verify that any combination that starts with a ``d'' gene and then
contains at least one ``f'' gene will have  a fitness of $1+0.4$.  And any
combination that starts with an ``f'' gene and contains at least one ``d''
genes will have a fitness of $1 - 0.3$.  All other genotypes have a
fitness of 1:

<<>>=
all(ag2[grep("^d.*f.*", ag2[, 1]), "Fitness"] == 1.4)
all(ag2[grep("^f.*d.*", ag2[, 1]), "Fitness"] == 0.7)
oe <- c(grep("^f.*d.*", ag2[, 1]), grep("^d.*f.*", ag2[, 1]))
all(ag2[-oe, "Fitness"] == 1)
@ 

\subsection{Genes without interactions}

Let's use three genes. We know there are no order effects, but we will
also see what happens if we examine genotypes as ordered.

<<>>=

ai1 <- evalAllGenotypes(allFitnessEffects(
    noIntGenes = c(0.05, -.2, .1)), order = FALSE)
@ 


We can easily verify the first results:

<<>>=
ai1
@ 

<<>>=

all(ai1[, "Fitness"]  == c( (1 + .05), (1 - .2), (1 + .1),
       (1 + .05) * (1 - .2),
       (1 + .05) * (1 + .1),
       (1 - .2) * (1 + .1),
       (1 + .05) * (1 - .2) * (1 + .1)))

@ 

And we can see that considering the order of mutations makes no difference:
<<>>=

ai2 <- evalAllGenotypes(allFitnessEffects(
    noIntGenes = c(0.05, -.2, .1)), order = TRUE)

ai2
@ 


\subsection{Order effects and genes without interactions}

We will now look at both order effects and interactions. To make things
more interesting, we name genes so that the ordered names do split nicely
between those with and those without order effects (this, thus, also
serves as a test of messy orders of names).

<<>>=

foi1 <- allFitnessEffects(
    orderEffects = c("D>B" = -0.2, "B > D" = 0.3),
    noIntGenes = c("A" = 0.05, "C" = -.2, "E" = .1))

@ 

You can get a verbose view of what the gene names and modules are (and
their automatically created numeric codes) by:

<<>>=
foi1[c("geneModule", "long.geneNoInt")]
@ 

We can get the fitness of all genotypes (we set $max = 325$ because that
is the number of possible genotypes):

<<>>=
agoi1 <- evalAllGenotypes(foi1,  max = 325)
head(agoi1)
@ 

To make comparisons simpler, and since the order was not ideal:

<<>>=
rownames(agoi1) <- agoi1[, 1]
@ 

Now:
<<>>=
agoi1[LETTERS[1:5], "Fitness"] == c(1.05, 1, 0.8, 1, 1.1)
@ 

According to the fitness effects we have specified, we also know that any
genotype with only two mutations, one of which is either ``A'', ``C'' or
``E'' and the other is ``B'' or ``D'' will have the fitness corresponding
to ``A'', ``C'' or ``E'', respectively:

<<>>=
rn <- rownames(agoi1) ## make some expression shorter below
agoi1[grep("^A > [BD]$", rn), "Fitness"] == 1.05
agoi1[grep("^C > [BD]$", rn), "Fitness"] == 0.8
agoi1[grep("^E > [BD]$", rn), "Fitness"] == 1.1
agoi1[grep("^[BD] > A$", rn), "Fitness"] == 1.05
agoi1[grep("^[BD] > C$", rn), "Fitness"] == 0.8
agoi1[grep("^[BD] > E$", rn), "Fitness"] == 1.1
@ 



\subsection{Bauer et al}

In the model of \cite[p.\ 54]{Bauer2014} ``For cells without the primary
driver mutation, each secondary driver mutation leads to a change in the
cell's fitness by $s_P$. For cells with the primary driver mutation, the
fitness advantage obtained with each secondary driver mutation is $s_{DP}$.''

They set apopsotis as 1 - proliferation. So, forgetting constants such as
$1/2$, we can set a table as:

typeDep is irrelevant
<<>>=
sd <- 0.1
sdp <- 0.15
sp <- 0.05

bauer <- data.frame(parent = c("Root", rep("p", 5)),
                    child = c("p", paste0("s", 1:5)),
                    s = c(sd, rep(sdp, 5)),
                    sh = c(0, rep(sp, 5)),
                    typeDep = "MN",
                    stringsAsFactors = FALSE)

@ 

<<>>=
b1 <- evalAllGenotypes(allFitnessEffects(bauer), order = FALSE)
@ 

Order makes no difference

<<>>=
b2 <- evalAllGenotypes(allFitnessEffects(bauer), order = TRUE, max = 2000)
@ 

And number of levels is right one: 11
<<>>=
table(b1)
table(b2)
length(table(b1))
length(table(b2))
@ 

\subsubsection{Bauer et al.\ specified only via epistatic interactions}

\subsubsection{Adding modules to Bauer et al.}

Can we use modules in this module? Sure, as in any other.


\subsection{Testing of mappings}

The mapping of restriction tables, epistasis, and order effects to
fitness, especially when there are modules, is a delicate part of the
code: reasonable cases are straightforward to deal with, but there are
many ways to shoot oneself in the foot. That is why we have placed lots of
pre- and post-condition checks in the code (both R and C++), and we have a
comprehensive set of tests in file zz. You are welcome to suggest more
tricky scenarios (and tests for them).

%% \section{Introduction}

%% This vignette presents the OncoSimulR package. OncoSimulR allows you to
%% simulate tumor progression using several models of tumor progression. In
%% these simulations you can restrict the order in which mutations can
%% accumulate. For instance, you can restrict the allowed order as specified,
%% for instance, in Oncogenetic Tree (OT; \cite{Desper1999JCB, Szabo2008}) or
%% Conjunctive Bayesian Network (CBN; \cite{Beerenwinkel2007, Gerstung2009,
%%   Gerstung2011}) models. Moreover, you can add passenger mutations to the
%% simulations. The models so far implemented are all continuous time models,
%% which are simulated using the BNB algorithm of Mather et
%% al.\ \cite{Mather2012}. This is a summary of some of the key features:


%% \begin{itemize}
%% \item You can pass arbitrary restrictions as specified by OTs or CBNs.
  
%% \item You can add passenger mutations.
  
%% \item You can allow for deviations from the OT and CBN models, specifying
%%   a penalty for such deviations (the $s_h$ parameter).
  
%% \item Right now, three different models are available, two that lead to
%%   exponential growth, one of them loosely based on Bozic et al.\
%%   \cite{Bozic2010}, and another that leads to logistic-like growth, based
%%   on McFarland et al.\ \cite{McFarland2013}.
%% \item Simulations are generally very fast as I use the BNB algorithm
%%   implemented in C++.
%% \end{itemize}


%% Further details about the motivation for wanting to
%% simulate data this way can be found in \cite{ot-biorxiv}, where additional
%% comments about model parameters and caveats are discussed. The Java
%% program by \cite{Reiter2013a} offers somewhat similar functionality, but
%% they are restricted to at most four drivers, you cannot use arbitrary CBNs
%% or OTs to specify order restrictions, there is no allowance for
%% passengers, and a single type of model (a discrete time Galton-Watson
%% process) is implemented.





%% Using this package will often involve the following steps:

%% \begin{enumerate}
%% \item Specify the restrictions in the order of mutations: section \ref{poset}.
%% \item Simulate cancer progression: section \ref{simul}. You can simulate
%%   for a single subject or for a set of subjects. You will need to
%%   \begin{itemize}
%%   \item Decide on a model (e.g., Bozic or McFarland).
%%   \item Specify the parameters of the model.
%%   \end{itemize}
%%   Of course, at least for initial playing around, you can use the defaults.
  
%% \item Sample from the simulated data: section \ref{sample}, and do
%%   something with those simulated data (e.g., fit an OT model to
%%   them). What you do with the data, however, is outside the scope of this
%%   package.   
%% \end{enumerate}


%% Before anything else, let us load the package. We also explicitly load
%% \Biocpkg{graph} for the vignette to work (you do not need that for your
%% usual interactive work).

%% <<>>=
%% library(OncoSimulR)
%% library(graph)
%% @ 


%% \section{Specifying restrictions: posets}\label{poset}

%% How to specify the restrictions is shown in the help for
%% \Rfunction{poset}. It is often useful, to make sure you did not make any
%% mistakes, to plot the poset. This is from the examples (we use an ``L''
%% after a number so that the numbers are integers, not doubles; we could
%% alternatively have modified \texttt{storage.mode}).

%% <<fig.height=3>>=
%% ## Node 2 and 3 depend on 1, and 4 depends on no one
%% p1 <- cbind(c(1L, 1L, 0L), c(2L, 3L, 4L))
%% plotPoset(p1, addroot = TRUE)
%% @ 

%% <<fig.height=3>>=
%% ## A simple way to create a poset where no gene (in a set of 15) depends
%% ## on any other.
%% p4 <- cbind(0L, 15L)
%% plotPoset(p4, addroot = TRUE)
%% @ 



%% Specifying posets is actually straightforward. For instance, we can
%% specify the pancreatic cancer poset in Gerstung et al.\
%% \cite{Gerstung2011} (their figure 2B, left). We specify the poset using
%% numbers, but for nicer plotting we will use names (KRAS is 1, SMAD4 is 2,
%% etc). This example is also in the help for \Rfunction{poset}:

%% <<fig.height=3>>=
%% pancreaticCancerPoset <- cbind(c(1, 1, 1, 1, 2, 3, 4, 4, 5),
%%                                c(2, 3, 4, 5, 6, 6, 6, 7, 7))
%% storage.mode(pancreaticCancerPoset) <- "integer"
%% plotPoset(pancreaticCancerPoset,
%%           names = c("KRAS", "SMAD4", "CDNK2A", "TP53",
%%                     "MLL3","PXDN", "TGFBR2"))
%% @
%% \section{Simulating cancer progression}\label{simul}


%% We can simulate the progression in a single subject. Using an example
%% very similar to the one in the help:


%% <<echo=FALSE,results='hide',error=FALSE>>=
%% options(width=60)
%% @ 

%% <<>>=
%% ## use poset p1101
%% data(examplePosets)
%% p1101 <- examplePosets[["p1101"]]

%% ## Bozic Model
%% b1 <- oncoSimulIndiv(p1101, keepEvery = 15)
%% summary(b1)
%% @ 


%% The first thing we do is make it simpler (for future examples) to use a
%% set of restrictions. In this case, those encoded in poset p1101. Then, we
%% run the simulations and look at a simple summary and a plot. %% We explicitly
%% %% set \texttt{silent = TRUE} to prevent the vignette from filling up with
%% %% intermediate output.

%% If you want to plot the trajectories, it is better to keep more frequent
%% samples,  so you can see when clones appear:

%% <<fig.height=5, fig.width=5>>=
%% b2 <- oncoSimulIndiv(p1101, keepEvery = 1)
                    
%% summary(b2)
%% plot(b2)
%% @ 


%% The following is an example where we do not care about passengers, but we
%% want to use a different graph, and we want a few more drivers before
%% considering cancer has been reached. And we allow it to run for longer.
%% Note that in the McF model \texttt{detectionSize} really plays no
%% role. Note also how we pass the poset: it is the same as before, but now
%% we directly access the poset in the list of posets.

%% <<>>=

%% m2 <- oncoSimulIndiv(examplePosets[["p1101"]], model = "McFL", 
%%                      numPassengers = 0, detectionDrivers = 8, 
%%                      mu = 5e-7, initSize = 4000, 
%%                      sampleEvery = 0.025,
%%                      finalTime = 25000, keepEvery = 5, 
%%                      detectionSize = 1e6) 
%% plot(m2, addtot = TRUE, log = "")

%% @ 


%% The default is to simulate progression until a simulation reaches cancer
%% (i.e., only simulations that satisfy the detectionDrivers or the
%% detectionSize will be returned). If you use the McF model with large
%% enough \texttt{initSize} this will often be the case but not if you use
%% very small \texttt{initSize}. Likewise, most of the Bozic runs do not
%% reach cancer. Lets try a few:

%% <<>>=
%% b3 <- oncoSimulIndiv(p1101, onlyCancer = FALSE)
%% summary(b3)

%% b4 <- oncoSimulIndiv(p1101, onlyCancer = FALSE)
%% summary(b4)
%% @ 

%% Plot those runs:

%% <<fig.width=8, fig.height=4>>=
%% par(mfrow = c(1, 2))
%% par(cex = 0.8) ## smaller font
%% plot(b3)
%% plot(b4)
%% @ 


%% \subsection{Simulating progression in several subjects}

%% To simulate the progression in a bunch of subjects (we will use only
%% four, so as not to fill the vignette with plots) we can do, with the same
%% settings as above:

%% <<>>=
%% p1 <- oncoSimulPop(4, p1101)
%% par(mfrow = c(2, 2))
%% plot(p1)
%% @ 


%% \section{Sampling from a set of simulated subjects}\label{sample}
%% \label{sec:sampling-from-set}

%% You will often want to do something with the simulated data. For instance,
%% sample the simulated data. Here we will obtain the trajectories for 100
%% subjects in a scenario without passengers. Then we will sample with the
%% default options and store that as a vector of genotypes (or a matrix of
%% subjects by genes):


%% <<>>=

%% m1 <- oncoSimulPop(100, examplePosets[["p1101"]], 
%%                    numPassengers = 0)

%% @ 

%% The function \Rfunction{samplePop} samples that object, and also gives you
%% some information about the output:

%% <<>>=
%% genotypes <- samplePop(m1)
%% @ 



%% What can you do with it? That is up to you. As an example, let us try to
%% infer an oncogenetic tree (and plot it) using the \CRANpkg{Oncotree}
%% package \cite{Oncotree} after getting a quick look at the marginal
%% frequencies of events:

%% <<fig.width=4, fig.height=4>>=
%% colSums(genotypes)/nrow(genotypes)

%% require(Oncotree)
%% ot1 <- oncotree.fit(genotypes)
%% plot(ot1)
%% @ 

%% Your run will likely differ from mine, but with the defaults (detection
%% size of $10^8$) it is likely that events down the tree will never
%% appear. You can set \texttt{detectionSize = 1e9} and you will see that
%% events down the tree are now found in the cross-sectional sample.


%% Alternatively, you can use single cell sampling and that, sometimes,
%% recovers one or a couple more events.

%% <<fig.width=4, fig.height=4>>=
%% genotypesSC <- samplePop(m1, typeSample = "single")
%% colSums(genotypesSC)/nrow(genotypesSC)

%% ot2 <- oncotree.fit(genotypesSC)
%% plot(ot2)
%% @ 

%% You can of course rename the columns of the output matrix to something
%% else if you want so the names of the nodes will reflect those potentially
%% more meaningful names.


\section{Session info and packages used}

This is the information about the version of R and packages used:
<<>>=
sessionInfo()
@ 

%\newpage
%%\bibliographystyle{apalike} %% or agsm or natbib? or apalike; maybe agsm
%% does the URL without turning into note?

%\bibliographystyle{apalike} %% or agsm or natbib? or apalike; maybe agsm
\bibliography{OncoSimulR}

\end{document}




%% remember to use bibexport to keep just the minimal bib needed
%% bibexport -o extracted.bib OncoSimulR.aux
%% rm OncoSimulR.bib
%% mv extracted.bib OncoSimulR.bib
%% and then turn URL of packages into notes

%%% Local Variables:
%%% TeX-master: t
%%% ispell-local-dictionary: "en_US"
%%% coding: iso-8859-15
%%% End:




