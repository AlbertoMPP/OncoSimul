* Change comment in vignette:
\@ref(gener-fit-land). (Note for curious readers: actually, what we
do now is convert the table of fitness of genotypes to a fitness
specification with all possible epistatic interactions; look
at the `fem6` object).


* R code

  - allFitnessEffects(... genotFitness) [in new-restrcit.R]
    - calls: from_genotype_fitness(genotFitness) [(that is in from_genotype_utils)]
      - calls genot_fitness_to_epistasis

  - result, after converted to epistasis, used in a call to
    allFitnessORMutatorEffects

** In R, do
   - pass the fitness landscape to allFitnessEffects
   - do not make the conversion to epistasis
   - have allFitnessORMutatorEffects input the fitness landscape
     - simplify (rm <= 0 fitness); yes, do here.
     - add a new component to the out: the plain, simple, fitness landscape
     - also needs to extract some other things:
       - genes so allNamedGenes(rFE) in nr_oncosimul.internal works:
         create the geneModule:
	 list(long.rt = NA
                long.epistasis = NA
                long.orderEffects = NA
                long.geneNoInt = NA
                geneModule = geneModule,
                gMOneToOne = gMOneToOne,
                geneToModule = geneToModule,
                graph = NA
                drv = drv,
                rT = NA
                epistasis = NA
                orderEffects = NA
                noIntGenes = NA,
                fitnessLandscape = fitnessLandscape
                )
		
   - do not allow this for Bozic! Only birth rates??


Note we use min_filter_fitness = 1e-9.

* C++
  - The fitness effect comes in rFE component, input to nr_BNB_AkÂ¡log5 in
    BNB_nr.cpp

  - convertFitnessEffects(rFE) deals with it. (in new_restrict.cpp)
  - evalGenotypeFitness
    - this uses fitnessEffectsAll struct

** In C++, do:

   - First: how are genotypes searched and stored?
     - Store in "rest" component of Genotype? Or create another vector?
       - yes, cleaner, another: "flGenes"
   - ?? How do we know those are flGenes?
     - createNewGenotype??  but early on, if using flandscape, just push
       into flGenes and sort and bail out
   - modify convertFitnessEffects to deal with landscape
     - create a fitnessLandscape map
   - modify evalGenotypeFitness to deal with it
   - beware of fitness_as_genes
     - in general, beware of anything with noInt, or rest, or Genotype as structure


* How to

  - non-specified genotypes are given fitness of 0 (this is a breaking change)
  - any <0 fitness genotype (and any unspecified genotype) is removed from the table.
  - we read into C++: a map?
  - fitness evaluation only requires searching in the map. And if no
    match, fitness of 0.
  - Do only for birth rates for now.

* Watch out for
  - No modules if fitness landscape spec, I guess.  "If you want to
    specify modules, you must use the lego system (the explicit mapping of
    genotypes is, by its very nature, ill-suited for this)." (in vignette)







* What happens with mutator?  
  - the fl specification?
  - do we have modules?

