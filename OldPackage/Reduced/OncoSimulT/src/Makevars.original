## I play with documentation from RcppGSL and end up here:

## for changing the optimization, can use ~/.R/Makevars : 
## http://stackoverflow.com/questions/5789673/r-c-optimization-flag-when-using-the-inline-package
## or do it here

## > mkdir ~/.R
## > echo CC=mpicc > ~/.R/Makevars
## > echo SHLIB_LD=mpicc >> ~/.R/Makevars


## so re-run for Rcpp and friends.

## So a Makevars like
# export MYAMD="-march=bdver1 -Ofast -g -fpic -pipe"
# export OPTIMFLAGS=$MYAMD
# export CFLAGS=$MYAMD
# export CXXFLAGS=$MYAMD
# export FFLAGS=$MYAMD
# export FCFLAGS=$MYAMD






# combine with standard arguments for R
PKG_CPPFLAGS = `${R_HOME}/bin/Rscript -e "RcppGSL:::CFlags()"` -I../inst/include -Wall
## next is for valgrind, to avoid inlining
## PKG_CPPFLAGS = -fno-inline `${R_HOME}/bin/Rscript -e "RcppGSL:::CFlags()"` -I../inst/include -fno-inline -Wall

## standard
PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` ` ${R_HOME}/bin/Rscript -e "RcppGSL:::LdFlags()"` $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)
## I am not using libgmp (multiprecission arithmetic) anymore
## PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` ` ${R_HOME}/bin/Rscript -e "RcppGSL:::LdFlags()"` $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) -lgmpxx -lgmp
## next is for profiling with google, I leave it since apparently little cost
#PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` ` ${R_HOME}/bin/Rscript -e "RcppGSL:::LdFlags()"` $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) -lgmpxx -lgmp -lprofiler

## next is for profling with gcc
## PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` ` ${R_HOME}/bin/Rscript -e "RcppGSL:::LdFlags()"` $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) -lgmpxx -lgmp -lgcov

 

## the next second line is what was uncommented.

## Use the R_HOME indirection to support installations of multiple R version
## PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS)




## we are using Armadillo
## PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"`

## As an alternative, one can also add this code in a file 'configure'
##
##    PKG_LIBS=`${R_HOME}/bin/Rscript -e "Rcpp:::LdFlags()"`
## 
##    sed -e "s|@PKG_LIBS@|${PKG_LIBS}|" \
##        src/Makevars.in > src/Makevars
## 
## which together with the following file 'src/Makevars.in'
##
##    PKG_LIBS = @PKG_LIBS@
##
## can be used to create src/Makevars dynamically. This scheme is more
## powerful and can be expanded to also check for and link with other
## libraries.  It should be complemented by a file 'cleanup'
##
##    rm src/Makevars
##
## which removes the autogenerated file src/Makevars. 
##
## Of course, autoconf can also be used to write configure files. This is
## done by a number of packages, but recommended only for more advanced users
## comfortable with autoconf and its related tools.



